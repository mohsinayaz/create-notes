{"version":3,"sources":["component/Note/AddNote.tsx","component/Note/Note.tsx","DUMMY_NOTES.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddNote","props","className","onSubmit","event","preventDefault","notes","text","target","value","link","recieveNote","type","id","Button","variant","Note","note","removeItem","updateNote","index","CloseButton","onClick","onBlur","newTextValue","textContent","updatedNoteItem","contentEditable","suppressContentEditableWarning","href","DUMMY_NOTES","_id","App","useState","noteList","setNoteList","removeNote","noteIndex","console","log","newList","filter","_","i","updateNoteItem","updatedNote","updateItemArray","map","useEffect","listFromStorage","localStorage","getItem","JSON","parse","newStringNotelist","stringify","setItem","length","noteItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3aae70ee.chunk.js","sourcesContent":["import { Button } from \"react-bootstrap\";\r\nimport \"./AddNote.css\";\r\n\r\nfunction AddNote(props: any) {\r\n  function CreateNotes(event: any) {\r\n    event.preventDefault();\r\n    const notes = {\r\n      text: event.target.text.value,\r\n      link: event.target.link.value,\r\n    };\r\n    props.recieveNote(notes);\r\n  }\r\n  return (\r\n    <>\r\n      <h1>Add Note</h1>\r\n      <form className=\"add\" onSubmit={CreateNotes}>\r\n        <div className=\"text\">\r\n          <label>Text</label>\r\n          <input type=\"text\" id=\"text\" />\r\n        </div>\r\n        <div className=\"link\">\r\n          <label>Link</label>\r\n          <input type=\"text\" id=\"link\" />\r\n        </div>\r\n        <div className=\"submitButton\">\r\n          <Button type=\"submit\" variant=\"primary\">\r\n            Create Notes\r\n          </Button>{\" \"}\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddNote;\r\n","import { FC, FocusEvent } from \"react\";\r\nimport { CloseButton } from \"react-bootstrap\";\r\nimport Inote from \"../../interfaces/notes.interface\";\r\nimport \"./Note.css\";\r\n\r\ntype Props = {\r\n  note: Inote;\r\n  updateNote: Function;\r\n  removeItem: Function;\r\n  index: number;\r\n};\r\n\r\nconst Note: FC<Props> = ({ note, removeItem, updateNote, index }) => {\r\n  function removeNote() {\r\n    removeItem(index);\r\n  }\r\n  function noteTextUpdate(event: FocusEvent<HTMLDivElement>) {\r\n    const newTextValue = event.target.textContent;\r\n    if (newTextValue === note.text) {\r\n      return;\r\n    }\r\n    const updatedNoteItem = {\r\n      ...note,\r\n      text: newTextValue,\r\n    };\r\n    updateNote(updatedNoteItem);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"note\">\r\n        <div className=\"remove-note\">\r\n          <CloseButton onClick={removeNote} />\r\n        </div>\r\n        <div\r\n          onBlur={noteTextUpdate}\r\n          className=\"note__text\"\r\n          contentEditable={true}\r\n          suppressContentEditableWarning={true}\r\n        >\r\n          {note.text}\r\n        </div>\r\n        <div className=\"note__link\">\r\n          <a href={note.link}>Link</a>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import Inote from \"./interfaces/notes.interface\";\r\n\r\nconst DUMMY_NOTES: Inote[] = [\r\n  {\r\n    _id: \"1\",\r\n    text: \"Mohsin Ayaz\",\r\n    link: \"https://www.mohsin.com\",\r\n  },\r\n  {\r\n    _id: \"2\",\r\n    text: \"Ahsan Ayaz\",\r\n    link: \"https://www.ahsan.com\",\r\n  },\r\n  {\r\n    _id: \"3\",\r\n    text: \"Mohsin Ayaz\",\r\n    link: \"https://www.mohsin.com\",\r\n  },\r\n  {\r\n    _id: \"4\",\r\n    text: \"Ahsan Ayaz\",\r\n    link: \"https://www.ahsan.com\",\r\n  },\r\n  {\r\n    _id: \"5\",\r\n    text: \"Mohsin Ayaz\",\r\n    link: \"https://www.mohsin.com\",\r\n  },\r\n  {\r\n    _id: \"6\",\r\n    text: \"Ahsan Ayaz\",\r\n    link: \"https://www.ahsan.com\",\r\n  },\r\n  {\r\n    _id: \"7\",\r\n    text: \"Mohsin Ayaz\",\r\n    link: \"https://www.mohsin.com\",\r\n  },\r\n  {\r\n    _id: \"8\",\r\n    text: \"Ahsan Ayaz\",\r\n    link: \"https://www.ahsan.com\",\r\n  },\r\n  {\r\n    _id: \"9\",\r\n    text: \"Mohsin Ayaz\",\r\n    link: \"https://www.mohsin.com\",\r\n  },\r\n  {\r\n    _id: \"10\",\r\n    text: \"Ahsan Ayaz\",\r\n    link: \"https://www.ahsan.com\",\r\n  },\r\n];\r\n\r\nexport default DUMMY_NOTES;\r\n","import { useEffect, useState } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport AddNote from \"./component/Note/AddNote\";\nimport Note from \"./component/Note/Note\";\n// import axios from \"axios\";\nimport DUMMY_NOTES from \"./DUMMY_NOTES\";\nimport Inote from \"./interfaces/notes.interface\";\n\nfunction App() {\n  const [noteList, setNoteList] = useState<Inote[]>([]);\n  const addNote = (note: Inote) => {\n    const newList = [...noteList, note];\n    // localStorage.setItem(\"notes\", JSON.stringify(newList));\n    console.log(newList);\n    setNoteList(newList);\n  };\n  const removeNote = (noteIndex: number) => {\n    console.log(noteIndex);\n    const newList = noteList.filter((_, i) => i !== noteIndex);\n    // localStorage.setItem(\"notes\", JSON.stringify(newList));\n    setNoteList(newList);\n  };\n  const updateNoteItem = (updatedNote: Inote) => {\n    const updateItemArray = noteList.map((note) => {\n      if (note._id === updatedNote._id) {\n        return updatedNote;\n      }\n      return note;\n    });\n    setNoteList(updateItemArray);\n    // localStorage.setItem(\"notes\", JSON.stringify(noteList));\n  };\n  // async function getNotes() {\n  //   try {\n  //     const response = await axios.get(\"http://localhost:5000/notes\");\n  //     setNoteList(response.data.notes);\n  //     console.log(noteList);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n  useEffect(() => {\n    const listFromStorage = localStorage.getItem(\"notes\");\n    if (listFromStorage) {\n      setNoteList(JSON.parse(listFromStorage!));\n    } else {\n      setNoteList(DUMMY_NOTES);\n    }\n  }, []);\n  useEffect(() => {\n    const newStringNotelist = JSON.stringify(noteList);\n    localStorage.setItem(\"notes\", newStringNotelist);\n  }, [noteList]);\n  return (\n    <div className=\"App\">\n      {/* <div>Notes Application</div> */}\n      {/* <div>\n        <button onClick={getNotes}>Click Me!</button>\n      </div> */}\n      <div className=\"add-note\">\n        <AddNote recieveNote={addNote} />\n      </div>\n      <div className=\"notes-list\">\n        {noteList.length === 0 ? (\n          <h4>No Notes Available</h4>\n        ) : (\n          noteList.map((noteItem, index) => {\n            return (\n              <Note\n                note={noteItem}\n                updateNote={updateNoteItem}\n                removeItem={removeNote}\n                key={index}\n                index={index}\n              />\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}